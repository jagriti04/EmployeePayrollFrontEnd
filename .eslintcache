[{"/home/jagriti/capG/react/employee-payroll-frontend/src/index.js":"1","/home/jagriti/capG/react/employee-payroll-frontend/src/App.js":"2","/home/jagriti/capG/react/employee-payroll-frontend/src/reportWebVitals.js":"3","/home/jagriti/capG/react/employee-payroll-frontend/src/components/payroll_home/payroll_home.jsx":"4","/home/jagriti/capG/react/employee-payroll-frontend/src/components/payroll_form/payroll_form.jsx":"5","/home/jagriti/capG/react/employee-payroll-frontend/src/components/payroll_home/display/display.jsx":"6","/home/jagriti/capG/react/employee-payroll-frontend/src/services/employee-service.js":"7","/home/jagriti/capG/react/employee-payroll-frontend/src/services/axios-service.js":"8","/home/jagriti/capG/react/employee-payroll-frontend/src/config/config.js":"9","/home/jagriti/capG/react/employee-payroll-frontend/src/components/header/header.jsx":"10"},{"size":500,"mtime":1608287163225,"results":"11","hashOfConfig":"12"},{"size":738,"mtime":1608321630458,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1608287163225,"results":"14","hashOfConfig":"12"},{"size":2542,"mtime":1609081668983,"results":"15","hashOfConfig":"12"},{"size":16948,"mtime":1609068365040,"results":"16","hashOfConfig":"12"},{"size":4440,"mtime":1609080070505,"results":"17","hashOfConfig":"12"},{"size":838,"mtime":1608953925036,"results":"18","hashOfConfig":"12"},{"size":504,"mtime":1608315187240,"results":"19","hashOfConfig":"12"},{"size":61,"mtime":1608615784847,"results":"20","hashOfConfig":"12"},{"size":591,"mtime":1608662681685,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1fowd97",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/jagriti/capG/react/employee-payroll-frontend/src/index.js",[],["44","45"],"/home/jagriti/capG/react/employee-payroll-frontend/src/App.js",[],"/home/jagriti/capG/react/employee-payroll-frontend/src/reportWebVitals.js",[],"/home/jagriti/capG/react/employee-payroll-frontend/src/components/payroll_home/payroll_home.jsx",[],"/home/jagriti/capG/react/employee-payroll-frontend/src/components/payroll_form/payroll_form.jsx",["46","47","48"],"import React, { useState, useEffect } from \"react\";\r\nimport profile1 from \"../../assets/profile-images/Ellipse -3.png\";\r\nimport profile2 from \"../../assets/profile-images/Ellipse 1.png\";\r\nimport profile3 from \"../../assets/profile-images/Ellipse -8.png\";\r\nimport profile4 from \"../../assets/profile-images/Ellipse -7.png\";\r\nimport \"./payroll_form.css\";\r\nimport { useParams, Link, withRouter } from \"react-router-dom\";\r\nimport EmployeeService from \"../../services/employee-service\";\r\nimport Header from \"../header/header\";\r\nimport { Snackbar } from '@material-ui/core';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nconst PayrollForm = props => {\r\n  let initialValue = {\r\n    name: \"\",\r\n    profileArray: [\r\n      { url: \"../../assets/profile-images/Ellipse -3.png\" },\r\n      { url: \"../../assets/profile-images/Ellipse 1.png\" },\r\n      { url: \"../../assets/profile-images/Ellipse -8.png\" },\r\n      { url: \"../../assets/profile-images/Ellipse -7.png\" }\r\n    ],\r\n    allDepartment: [{\"id\": 1, \"department\": 'HR' }, { \"id\": 2, \"department\": 'Engineer' },\r\n    { \"id\": 3 , \"department\": 'Finance'}, {\"id\": 4, \"department\": 'Sales' }, {\"id\": 5, \"department\": 'Others' }],\r\n    departmentValue: [],\r\n    gender: \"\",\r\n    salary: \"40000\",\r\n    day: \"1\",\r\n    month: \"Jan\",\r\n    year: \"2020\",\r\n    startdate: \"\",\r\n    notes: \"\",\r\n    id: \"\",\r\n    profile: \"\",\r\n    isUpdate: false,\r\n    error: {\r\n      department: \"\",\r\n      name: \"\",\r\n      gender: \"\",\r\n      salary: \"\",\r\n      profile: \"\",\r\n      startdate: \"\"\r\n    }\r\n  };\r\n  const [formValue, setForm] = useState(initialValue);\r\n  const params = useParams();\r\n  let employeeService = new EmployeeService();\r\n\r\n  useEffect(() => {\r\n    if (params.id) {\r\n      getDataById(params.id);\r\n    }\r\n  }, []);\r\n\r\n  const getDataById = (id) => {\r\n    employeeService\r\n      .getEmployee(id)\r\n      .then((data) => {\r\n        console.log(\"in form data is \", data.data);\r\n        let obj = data.data;\r\n        setData(obj);\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err is \", err);\r\n      });\r\n  };\r\n\r\n  const setData = (obj) => {\r\n    let array = obj.startdate.split(\" \");\r\n    setForm({\r\n      ...formValue,\r\n      ...obj,\r\n      profile: obj.profile,\r\n      departmentValue: obj.department,\r\n      isUpdate: true,\r\n      day: array[0],\r\n      month: array[1],\r\n      year: array[2],\r\n    });\r\n  };\r\n\r\n  let handleChange = event => {\r\n    console.log(\"in on change method\");\r\n    setForm({\r\n      ...formValue,\r\n      [event.target.name]: event.target.value,\r\n      startdate: `${formValue.day} ${formValue.month} ${formValue.year}`\r\n    });\r\n    console.log(formValue);\r\n    console.log(\"in on handle change method --- \" + formValue + \" \" + formValue.day);\r\n  };\r\n\r\n  let validFormData = async () => {\r\n    let isError = false;\r\n    let error = {\r\n      department: '',\r\n      name: '',\r\n      gender: '',\r\n      salary: '',\r\n      profile: '',\r\n      startdate: ''\r\n    }\r\n\r\n    const selectedDate = new Date(formValue.startdate);\r\n    if (formValue.name.length < 3) {\r\n      error.name = 'Name length should be greater than 3'\r\n      isError = true;\r\n    } else if (!formValue.name.match(\"^([A-Z])[A-Za-z\\\\s]{2,}$\")) {\r\n      error.name = 'Name should be in correct format. Eg. Bill Gates'\r\n      isError = true;\r\n    }\r\n    if (formValue.gender.length < 1) {\r\n      error.gender = 'Select the gender'\r\n      isError = true;\r\n    }\r\n\r\n    if (formValue.profile.length < 1) {\r\n      error.profile = 'Select the profile picture'\r\n      isError = true;\r\n    }\r\n\r\n    if (formValue.departmentValue.length < 1) {\r\n      error.department = 'Select atleast one department';\r\n      isError = true;\r\n    }\r\n    console.log(selectedDate > Date.now());\r\n    if (selectedDate > Date.now()) {\r\n      error.startdate = 'Date is not valid';\r\n      isError = true;\r\n    }\r\n    await setForm({ ...formValue, error: error })\r\n    return isError;\r\n  };\r\n\r\n  const onCheckChange = (name) => {\r\n    console.log(\"..... \", formValue.departmentValue);\r\n    let index = formValue.departmentValue.indexOf(name);\r\n    console.log(name, \" in check method--- \", index);\r\n    let checkArray = [...formValue.departmentValue]\r\n    console.log(\" check array is --- \" , formValue.departmentValue, \" and \", checkArray);\r\n    if (index > -1)\r\n      checkArray.splice(index, 1)\r\n    else\r\n      checkArray.push(name);\r\n    console.log(formValue.departmentValue);\r\n    setForm({ ...formValue, departmentValue: checkArray });\r\n  }\r\n  const getChecked = (name) => {\r\n    let isChecked = false;\r\n    formValue.departmentValue.forEach((dept) => {\r\n      if (dept.department === name.department) {\r\n        isChecked = true;\r\n      }\r\n    });\r\n    return formValue.departmentValue && isChecked;\r\n  }\r\n\r\n  let handleSubmit = async event => {\r\n    event.preventDefault();\r\n    if (await validFormData()) {\r\n      console.log(\"error\", formValue);\r\n      return;\r\n    }\r\n    let employee = {\r\n      name: formValue.name,\r\n      department: [],\r\n      gender: formValue.gender,\r\n      salary: formValue.salary,\r\n      startdate: `${formValue.day} ${formValue.month} ${formValue.year}`,\r\n      notes: formValue.notes,\r\n      id: formValue.id,\r\n      profile: formValue.profile,\r\n    };\r\n    formValue.departmentValue.map((data) => {\r\n      employee.department.push(data)\r\n    });\r\n    employee.id = params.id;\r\n    console.log(employee);\r\n\r\n    if (formValue.isUpdate === true) {\r\n      employeeService.updateEmployee(employee).then(data => {\r\n        setOpen(true);\r\n        setTimeout( () => {\r\n          props.history.push('/home');\r\n        }, 2000)\r\n      }).catch(err => {\r\n        console.log(\"error in updation is \", err);\r\n      })\r\n    } else {\r\n      employeeService.addEmployee(employee).then(data => {\r\n        setOpen(true);\r\n        setTimeout( () => {\r\n          props.history.push('/home');\r\n        }, 2000);\r\n      }).catch(err => {\r\n        console.log(\"err while add\");\r\n      })\r\n    }\r\n  }\r\n\r\n  const reset = () => {\r\n    setForm({ ...initialValue, id: formValue.id, isUpdate: formValue.isUpdate });\r\n\r\n    console.log(formValue);\r\n  }\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"payroll-form\">\r\n      <Header />\r\n      <div className=\"content\">\r\n        <form className=\"form\" action=\"#\" onSubmit={handleSubmit}>\r\n          <div className=\"form-head\">Employee Payroll form</div>\r\n          <div className=\"row\">\r\n            <label className=\"label text\" htmlFor=\"name\">\r\n              Name\r\n            </label>\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"name\"\r\n              value={formValue.name}\r\n              onChange={handleChange}\r\n              placeholder=\"Your name...\"\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.name} </div>\r\n          <div className=\"row\">\r\n            <label className=\"label text\" htmlFor=\"profile\">\r\n              Profile image\r\n            </label>\r\n            <div className=\"profile-radio-button\">\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  checked={\r\n                    formValue.profile ===\r\n                    \"../../../assets/profile-images/Ellipse -3.png\"\r\n                  }\r\n                  name=\"profile\"\r\n                  value=\"../../../assets/profile-images/Ellipse -3.png\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <img className=\"profile\" src={profile1} alt=\"profile\" />\r\n              </label>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"profile\"\r\n                  checked={\r\n                    formValue.profile ===\r\n                    \"../../../assets/profile-images/Ellipse 1.png\"\r\n                  }\r\n                  value=\"../../../assets/profile-images/Ellipse 1.png\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <img className=\"profile\" src={profile2} alt=\"profile\" />\r\n              </label>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"profile\"\r\n                  checked={\r\n                    formValue.profile ===\r\n                    \"../../../assets/profile-images/Ellipse -8.png\"\r\n                  }\r\n                  value=\"../../../assets/profile-images/Ellipse -8.png\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <img className=\"profile\" src={profile3} alt=\"profile\" />\r\n              </label>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"profile\"\r\n                  checked={\r\n                    formValue.profile ===\r\n                    \"../../../assets/profile-images/Ellipse -7.png\"\r\n                  }\r\n                  value=\"../../../assets/profile-images/Ellipse -7.png\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <img className=\"profile\" src={profile4} alt=\"profile\" />\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.profile} </div>\r\n          <div className=\"row\">\r\n            <label className=\"label text\" htmlFor=\"gender\">\r\n              Gender\r\n            </label>\r\n            <div>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"male\"\r\n                checked={formValue.gender === \"male\"}\r\n                onChange={handleChange}\r\n                name=\"gender\"\r\n                value=\"male\"\r\n                required\r\n              />\r\n              <label className=\"text\" htmlFor=\"male\">\r\n                Male\r\n              </label>\r\n              <input\r\n                type=\"radio\"\r\n                id=\"female\"\r\n                checked={formValue.gender === \"female\"}\r\n                onChange={handleChange}\r\n                name=\"gender\"\r\n                value=\"female\"\r\n              />\r\n              <label className=\"text\" htmlFor=\"female\">\r\n                Female\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.gender} </div>\r\n\r\n          <div className=\"row\">\r\n            <label className=\"label text\" htmlFor=\"department\">\r\n              Department\r\n            </label>\r\n            <div>\r\n              {formValue.allDepartment.map(item => (\r\n                <span key={item.department}>\r\n                  <input\r\n                    className=\"checkbox\"\r\n                    type=\"checkbox\"\r\n                    onChange={() => onCheckChange(item)}\r\n                    name={item.department}\r\n                    checked={getChecked(item)}\r\n                    value={item.department}\r\n                  />\r\n                  <label className=\"text dept-text\" htmlFor={item.department}>\r\n                    {item.department}\r\n                  </label>\r\n                </span>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.department} </div>\r\n\r\n          <div className=\"row\">\r\n            <label className=\"label text\" htmlFor=\"salary\">\r\n              Salary\r\n            </label>\r\n            <input\r\n              className=\"input\"\r\n              type=\"range\"\r\n              onChange={handleChange}\r\n              id=\"salary\"\r\n              value={formValue.salary}\r\n              name=\"salary\"\r\n              placeholder=\"Salary\"\r\n              min=\"30000\"\r\n              max=\"50000\"\r\n              step=\"100\"\r\n            />  {formValue.salary}\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.salary} </div>\r\n\r\n          <div className=\"row\">\r\n            <label className=\"label text\" htmlFor=\"startdate\">\r\n              Start Date\r\n            </label>\r\n            <div>\r\n              <select\r\n                value={formValue.day}\r\n                onChange={handleChange}\r\n                id=\"day\"\r\n                name=\"day\"\r\n              >\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n                <option value=\"5\">5</option>\r\n                <option value=\"6\">6</option>\r\n                <option value=\"7\">7</option>\r\n                <option value=\"8\">8</option>\r\n                <option value=\"9\">9</option>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"11\">11</option>\r\n                <option value=\"12\">12</option>\r\n                <option value=\"13\">13</option>\r\n                <option value=\"14\">14</option>\r\n                <option value=\"15\">15</option>\r\n                <option value=\"16\">16</option>\r\n                <option value=\"17\">17</option>\r\n                <option value=\"18\">18</option>\r\n                <option value=\"19\">19</option>\r\n                <option value=\"20\">20</option>\r\n                <option value=\"21\">21</option>\r\n                <option value=\"22\">22</option>\r\n                <option value=\"23\">23</option>\r\n                <option value=\"24\">24</option>\r\n                <option value=\"25\">25</option>\r\n                <option value=\"26\">26</option>\r\n                <option value=\"27\">27</option>\r\n                <option value=\"28\">28</option>\r\n                <option value=\"29\">29</option>\r\n                <option value=\"30\">30</option>\r\n                <option value=\"31\">31</option>\r\n              </select>\r\n              <select\r\n                value={formValue.month}\r\n                onChange={handleChange}\r\n                id=\"month\"\r\n                name=\"month\"\r\n              >\r\n                <option value=\"Jan\">January</option>\r\n                <option value=\"Feb\">Febuary</option>\r\n                <option value=\"March\">March</option>\r\n                <option value=\"April\">April</option>\r\n                <option value=\"May\">May</option>\r\n                <option value=\"June\">June</option>\r\n                <option value=\"July\">July</option>\r\n                <option value=\"Aug\">August</option>\r\n                <option value=\"Sept\">September</option>\r\n                <option value=\"Oct\">October</option>\r\n                <option value=\"Nov\">November</option>\r\n                <option value=\"Dec\">December</option>\r\n              </select>\r\n              <select\r\n                value={formValue.year}\r\n                onChange={handleChange}\r\n                id=\"year\"\r\n                name=\"year\"\r\n              >\r\n                <option value=\"2020\">2020</option>\r\n                <option value=\"2019\">2019</option>\r\n                <option value=\"2018\">2018</option>\r\n                <option value=\"2017\">2017</option>\r\n                <option value=\"2016\">2016</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"error\"> {formValue.error.startdate} </div>\r\n\r\n          <div className=\"row\">\r\n            <label className=\"label text\" htmlFor=\"notes\">\r\n              Notes\r\n            </label>\r\n            <textarea\r\n              onChange={handleChange}\r\n              id=\"notes\"\r\n              value={formValue.notes}\r\n              className=\"input\"\r\n              name=\"notes\"\r\n              placeholder=\"\"\r\n              style={{ height: \"100%\" }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"buttonParent\">\r\n            <Link to=\"/home\" className=\"button cancelButton\">\r\n              Cancel\r\n            </Link>\r\n\r\n            <div className=\"submit-reset\">\r\n              <button type=\"submit\"\r\n                className=\"button submitButton\"\r\n                id=\"submitButton\"\r\n              >\r\n                {formValue.isUpdate ? \"Update\" : \"Submit\"}\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"resetButton button\"\r\n                onClick={reset}\r\n              >\r\n                Reset\r\n              </button>\r\n            </div>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert onClose={handleClose} severity=\"success\">\r\n                Data added successfully!\r\n              </Alert>\r\n            </Snackbar>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default withRouter(PayrollForm);\r\n","/home/jagriti/capG/react/employee-payroll-frontend/src/components/payroll_home/display/display.jsx",["49"],"/home/jagriti/capG/react/employee-payroll-frontend/src/services/employee-service.js",[],"/home/jagriti/capG/react/employee-payroll-frontend/src/services/axios-service.js",[],"/home/jagriti/capG/react/employee-payroll-frontend/src/config/config.js",[],"/home/jagriti/capG/react/employee-payroll-frontend/src/components/header/header.jsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":66,"column":6,"nodeType":"56","endLine":66,"endColumn":8,"suggestions":"57"},{"ruleId":"58","severity":1,"message":"59","line":187,"column":42,"nodeType":"60","messageId":"61","endLine":187,"endColumn":44},{"ruleId":"62","severity":1,"message":"63","line":220,"column":9,"nodeType":"64","messageId":"65","endLine":220,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":66,"column":9,"nodeType":"64","messageId":"65","endLine":66,"endColumn":16},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getDataById' and 'params.id'. Either include them or remove the dependency array.","ArrayExpression",["68"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [getDataById, params.id]",{"range":"71","text":"72"},[2054,2056],"[getDataById, params.id]"]